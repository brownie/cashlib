
#ifndef _VEPROVER_H_
#define _VEPROVER_H_

#include "VEPublicKey.h"
#include "VECiphertext.h"

/*! \brief this represents a class for proving that the ciphertext, 
 * once decrypted, will correspond to the value contained in a 
 * given commitment */

class VEProver {
	public:
		/*! constructor: takes in a VE public key as generated by the 
		 * arbiter (decrypter) */
		VEProver(Ptr<const VEPublicKey> pk) : pk(pk) {}

		/*! copy constructor */
		VEProver(const VEProver& o) : pk(o.pk) {}

		/*! destructor */
		~VEProver() {}

		// XXX: should ultimately have another function that takes in 
		// genNames for group, and then use ProgramMaker to make a VE
		// program that doesn't assuming input form of group

		/*! verifiable encryption takes in a commitment and the opening to
		 * the commitment.  it outputs a ciphertext such that, when the
		 * ciphertext is decrypted, the value will correspond to the value
		 * contained within the commitment.  it also outputs a
		 * proof that this is true. */
		VECiphertext verifiableEncrypt(const ZZ &commitment,
									   const vector<ZZ> &opening, 
									   Ptr<const Group> grp, const string &label, 
									   const hashalg_t &hashAlg, int stat);
		
		vector<ZZ> encrypt(const vector<ZZ> &messages, const string &label,
						   const hashalg_t &hashAlg, int stat);

	private:
		Ptr<const VEPublicKey> pk;
		Environment env;
};

#endif /*VEPROVER_H_*/
